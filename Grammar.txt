S'->P
P->D
D->D S
D->D D
D->T id ;
D->T id = E ;
D->struct id ( D D ) ;
D->id ( Elist ) { P }
D->read ( id ) ;
D->print ( E ) ;
Elist->T id , Elist
Elist->T id @,
T->type
type->int 
type->float
type->char
P->S
S->S S
S->id = E ;
S->id op ;
S->op id ;
S->call id ( Elist2 ) ;
Elist2->id , Elist2
Elist2->id @,
op->++
op->--
S->L = E ;
E->E + E @*
E->E * E
E->- E
E->( E )
E->id @[
E->digitInt
E->digitFloat
E->L @[
L->id [ E ]
L->L [ E ] 
D->T L ;
S->S1
S->S2
S1->if ( B ) { P } @else
S2->if ( B ) { P } else { P }
S->while ( B ) { P }
S->do { B } while ( P ) 
B->B && B
B->B || B @&&
B->E relop E
B->true
B->false
B->! B
relop-><
relop-><=
relop->==
relop->!=
relop->>
relop->>=